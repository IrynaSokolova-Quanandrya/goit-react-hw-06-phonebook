{"version":3,"sources":["styles/button.module.css","App.module.css","styles/contactList.module.css","styles/form.module.css","redax/selectors.js","redax/actions.js","components/ContactForm.js","components/ContactList.js","components/Filter.js","App.js","redax/reduser.js","redax/store.js","index.js","styles/input.module.css"],"names":["module","exports","getContacts","state","contacts","getFilter","filter","visibleContacts","normalizedFilter","toLowerCase","name","includes","phonebookActions","addContact","createAction","number","payload","id","nanoid","deleteContact","changeFilter","ContactForm","useState","setName","setNumber","dispatch","useDispatch","useSelector","handleChange","e","target","value","reset","className","s","form","onSubmit","preventDefault","find","contact","alert","styles","label","htmlFor","onChange","type","pattern","title","required","style","btn","ContactList","contactsList","contact__list","map","contact__item","onDelete","Filter","input","prototype","PropTypes","object","isRequired","onDeleteContact","func","string","Phonebook","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","App","document","getElementById"],"mappings":"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","file":"static/js/main.dc6d0e93.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button_btn__a2KQ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__27tKL\",\"App-logo\":\"App_App-logo__2CWxu\",\"App-logo-spin\":\"App_App-logo-spin__zhsMi\",\"App-header\":\"App_App-header__35K7e\",\"App-link\":\"App_App-link__2s7Hx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact__list\":\"contactList_contact__list__3AK8L\",\"contact__item\":\"contactList_contact__item__1hCeo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__2ydN8\"};","export const getContacts = (state) => state.contacts;\nexport const getFilter = (state) => state.filter;\n\nexport const visibleContacts = (state) => {\n  // console.log('Весь стейт внутри visibleContacts:', state);\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  //  console.log(\"Фильтр внутри visibleContacts:\", filter);\n  //   console.log(\"Контакты внутри visibleContacts:\", contacts );\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) => {\n    // console.log({name});\n    return name.toLowerCase().includes(normalizedFilter);\n  });\n};\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { nanoid } from \"nanoid\";\n\nconst addContact = createAction(\"contact/Add\", (number, name) => ({\n  payload: {\n    id: nanoid(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction(\"contact/Delete\");\n\nconst changeFilter = createAction(\"contact/changeFilter\");\n\nconst phonebookActions = {\n  addContact,\n  deleteContact,\n  changeFilter,\n};\nexport default phonebookActions;\n","/** @format */\n\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts } from \"../redax/selectors\";\nimport s from \"../styles/form.module.css\";\nimport styles from \"../styles/input.module.css\";\nimport style from \"../styles/button.module.css\";\nimport { nanoid } from \"nanoid\";\nimport phonebookActions from \"../redax/actions\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    name === \"name\" ? setName(value) : setNumber(value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(phonebookActions.addContact({ name, number }));\n    reset();\n  };\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={styles.label} htmlFor={nanoid()}>\n        Name\n        <input\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          id={nanoid()}\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n      <label className={styles.label} htmlFor={nanoid()}>\n        Number\n        <input\n          value={number}\n          onChange={handleChange}\n          type=\"tel\"\n          id={nanoid()}\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n      <button type=\"submit\" className={style.btn}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","/** @format */\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport phonebookActions from \"../redax/actions\";\nimport { visibleContacts } from \"../redax/selectors\";\nimport PropTypes from \"prop-types\";\nimport styles from \"../styles/button.module.css\";\nimport s from \"../styles/contactList.module.css\";\n\nexport default function ContactList() {\n  const contactsList = useSelector(visibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={s.contact__list}>\n      {contactsList.map(({ id, name, number }) => (\n        <li className={s.contact__item} key={id}>\n          {name}: {number}\n          <button\n            type=\"button\"\n            className={styles.btn}\n            onDelete={() => dispatch(phonebookActions.deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\nContactList.prototype = {\n  contacts: PropTypes.object.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n","/** @format */\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getFilter } from \"../redax/selectors\";\nimport phonebookActions from \"../redax/actions\";\nimport PropTypes from \"prop-types\";\nimport s from \"../styles/input.module.css\";\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        value={value}\n        onChange={(e) =>\n          dispatch(phonebookActions.changeFilter(e.target.value))\n        }\n        type=\"text\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n}\nFilter.prototype = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","/** @format */\nimport s from \"./App.module.css\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nfunction Phonebook() {\n  return (\n    <div>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={s.title}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default Phonebook;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"./actions\";\n\nconst INITIAL_CONTACTS_LIST = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n];\n\nconst contacts = createReducer(INITIAL_CONTACTS_LIST, {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport storage from \"redux-persist/lib/storage\";\nimport logger from \"redux-logger\";\nimport phonebookReducer from \"./reduser\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst persistConfig = {\n  key: \"contacts\",\n  storage,\n};\n\nexport const store = configureStore({\n  reducer: persistReducer(persistConfig, phonebookReducer),\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nexport const persistor = persistStore(store);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store, persistor } from \"./redax/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"input_label__3hhEO\",\"input\":\"input_input__3MmiE\"};"],"sourceRoot":""}